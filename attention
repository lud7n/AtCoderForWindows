
考え方をまとめるところ

-----------------------------------------------------------------------------

典型85 エラトステネスの篩*答えのみ全探索

高速の約数 (or素数) の全列挙→エラトステネス

オーバーフローに注意するとき
乗算と除算が複数回必要→不等式を変形してみる！

-----------------------------------------------------------------------------

典型084 ランレングス圧縮
oとxで構成された文字列S → 出現回数、個数を記録しておく

ex. "oooooxxxxooo" の場合 ("o",5), ("x",4), ("o",3) みたいな感じ

-----------------------------------------------------------------------------

二分探索の自分の理解メモ

----------------------------------------------

・binary_search → keyがあるかどうかのみを把握する(返り値がbool)
(どこにあるかはわからない)

int main() {

    //ソートする必要がある
    vector<int> a = { 1,4,4,7,7,8,8,11, 13, 19 };

    cout << binary_search(a.begin(), a.end(), 4) << endl; //True
    cout << binary_search(a.begin(), a.end(), 9) << endl; //False
    cout << binary_search(a.begin(), a.end(), 3) << endl; //False
}

----------------------------------------------

・lower_bound → ソートされた配列内で、key以上の要素のうち、一番左側のイテレータを返却

int main() {

    //ソートする必要がある
    vector<int> a = {1, 4, 4, 7, 7, 8, 8, 11, 13, 19};

    //イテレータを返す
    auto Iter1 = lower_bound(ALL(a), 4);
    auto Iter2 = lower_bound(ALL(a), 6);
    auto Iter3 = lower_bound(ALL(a), 7);
    auto Iter4 = lower_bound(ALL(a), 19);
    auto Iter5 = lower_bound(ALL(a), 20);

    //値の表示
    cout << "----------value----------" << endl;
    cout << "Iter1 = " << *Iter1 << endl; //Iter1 = 4
    cout << "Iter2 = " << *Iter2 << endl; //Iter2 = 7
    cout << "Iter3 = " << *Iter3 << endl; //Iter3 = 7
    cout << "Iter4 = " << *Iter4 << endl; //Iter4 = 19
    cout << "Iter5 = " << *Iter5 << endl; //Iter5 = 1326115891

    //先頭からの距離
    cout << "----------from----------" << endl;
    cout << "Iter1 = " << Iter1 - a.begin() << endl; //Iter1 = 1
    cout << "Iter2 = " << Iter2 - a.begin() << endl; //Iter2 = 3
    cout << "Iter3 = " << Iter3 - a.begin() << endl; //Iter3 = 3
    cout << "Iter4 = " << Iter4 - a.begin() << endl; //Iter4 = 9
    cout << "Iter5 = " << Iter5 - a.begin() << endl; //Iter5 = 10

    //末尾までの距離
    cout << "----------to----------" << endl;
    cout << "Iter1 = " << a.end() - Iter1 << endl; //Iter1 = 9 
    cout << "Iter2 = " << a.end() - Iter2 << endl; //Iter2 = 7
    cout << "Iter3 = " << a.end() - Iter3 << endl; //Iter3 = 7
    cout << "Iter4 = " << a.end() - Iter4 << endl; //Iter4 = 1
    cout << "Iter5 = " << a.end() - Iter5 << endl; //Iter5 = 0

    return 0;
}

----------------------------------------------

・upper_bound → ソートされた配列内で、keyより大きい要素のうち、一番左側のイテレータを返却

int main() {

    //ソートする必要があるのじゃ…
    vector<int> a = {1, 4, 4, 7, 7, 8, 8, 11, 13, 19};

    //イテレータを返す
    auto Iter1 = upper_bound(ALL(a), 4);
    auto Iter2 = upper_bound(ALL(a), 6);
    auto Iter3 = upper_bound(ALL(a), 7);
    auto Iter4 = upper_bound(ALL(a), 19);
    auto Iter5 = upper_bound(ALL(a), 20);

    //値の表示
    cout << "----------value----------" << endl;
    cout << "Iter1 = " << *Iter1 << endl; //Iter1 = 7
    cout << "Iter2 = " << *Iter2 << endl; //Iter2 = 7
    cout << "Iter3 = " << *Iter3 << endl; //Iter3 = 8
    cout << "Iter4 = " << *Iter4 << endl; //Iter4 = 1326115891
    cout << "Iter5 = " << *Iter5 << endl; //Iter5 = 1326115891

    //先頭からの距離
    cout << "----------from----------" << endl;
    cout << "Iter1 = " << Iter1 - a.begin() << endl; //Iter1 = 3
    cout << "Iter2 = " << Iter2 - a.begin() << endl; //Iter2 = 3
    cout << "Iter3 = " << Iter3 - a.begin() << endl; //Iter3 = 5
    cout << "Iter4 = " << Iter4 - a.begin() << endl; //Iter4 = 10
    cout << "Iter5 = " << Iter5 - a.begin() << endl; //Iter5 = 10

    //末尾までの距離
    cout << "----------to----------" << endl;
    cout << "Iter1 = " << a.end() - Iter1 << endl; //Iter1 = 7
    cout << "Iter2 = " << a.end() - Iter2 << endl; //Iter2 = 7
    cout << "Iter3 = " << a.end() - Iter3 << endl; //Iter3 = 5
    cout << "Iter4 = " << a.end() - Iter4 << endl; //Iter4 = 0
    cout << "Iter5 = " << a.end() - Iter5 << endl; //Iter5 = 0

    return 0;
}

-----------------------------------------------------------------------------

・charの'7'をintの7に変換

char c = '7';
int i = c - 48;
int j = c - '0';
cout << i << ", " << j; // 7, 7


・intの7をcharの'7'に変換

int i = 7;
char c1 = i + 48;
char c2 = i + '0';
cout << c1 << ", " << c2; // '7', '7'


・stringの'31415'をintの31415に変換

string s = "31415";
int i = stoi(s);
cout << i; // 31415


・intの31415をstringの'31415'に変換

int i = 31415;
string s = to_string(i);
cout << s; // "31415"


・Yの文字コードを得る

char c = 'Y';
int i = c;
cout << i; // 89


・文字コードが89のアルファベットを得る

int i = 89;
char c = i;
cout << c; // 'Y'


・xがaから数えて何番目のアルファベットか知りたいとき

char c = 'x';
int i = c - 97;
int j = c - 'a';
cout << i << ", " << j << endl; // 23, 23


・aから23番目のアルファベットを得たいとき

int i = 23;
char c1 = i + 97;
char c2 = i + 'a';
cout << c1 << ", " << c2 << endl; // 'x', 'x'


-----------------------------------------------------------------------------

典型008 二次元状態DP

dp[文字列の添字][何文字目までを通過したか]=通り道の数 として構成

対象の文字を発見したときに取得するか、しないかを考える
→bit全探索臭いが、実装が煩雑すぎる
→状態DP って思考になればよかった

-----------------------------------------------------------------------------

・順列全列挙

int arr[n];
    rep(i,n) arr[i] = i;

    do{
        rep(i,n) cout << arr[i] << " ";
        cout << endl;
    }while(next_permutation(arr, arr+n));

-----------------------------------------------------------------------------
